import os, re, unicodedata
import pandas as pd
from sqlalchemy import text
from rapidfuzz import fuzz, process
from tqdm import tqdm
from db_config import get_db_connection

# ------------------------------------
# CONFIG
# ------------------------------------
CITY_THRESHOLD = 0.5
STATE_THRESHOLD = 0.6

STOP_WORDS = {
    "division","city","district","region","circle","zone","south","north",
    "east","west","office","so","s.o","bo","b.o","po","p.o","head","branch",
    "rms","ho","do","co","post","nodal","sub","urban","rural","taluk","mandal"
}

CITY_ALIASES = {
    "bombay":"mumbai","bengaluru":"bangalore","bengluru":"bangalore",
    "benglore":"bangalore","calcutta":"kolkata","trivandrum":"thiruvananthapuram",
    "kochi":"cochin","cochin":"kochi","vadodara":"baroda","baroda":"vadodara",
    "pondicherry":"puducherry","nasik":"nashik","gurgaon":"gurugram",
    "gurugram":"gurgaon","ahmadabad":"ahmedabad"
}

# ------------------------------------
# HELPERS
# ------------------------------------
def strip_accents(s): 
    return ''.join(ch for ch in unicodedata.normalize('NFKD', str(s)) if not unicodedata.combining(ch))

def clean_text(s):
    s = strip_accents(str(s or '')).lower()
    s = re.sub(r'[^\w\s]', ' ', s)
    s = re.sub(r'\s+', ' ', s).strip()
    return s

def normalize_city(s):
    s = clean_text(s)
    toks = [CITY_ALIASES.get(t, t) for t in s.split() if t not in STOP_WORDS]
    return ' '.join(toks).strip().title()

def sim(a,b): 
    return fuzz.token_set_ratio(a or '', b or '')/100

def extract_pin(txt):
    if not txt: return None
    m = re.search(r'(?<!\d)(\d{6})(?!\d)', str(txt))
    return m.group(1) if m else None

# ------------------------------------
# STATE MAPPINGS
# ------------------------------------
def load_state_mappings():
    csv_path = os.path.join(os.path.dirname(__file__), "datasets", "abbreviation_list 1.csv")
    df = pd.read_csv(csv_path)
    df.columns = df.columns.str.strip().str.title()
    df["State"] = df["State"].astype(str).str.strip().str.title()
    df["Abbreviation"] = df["Abbreviation"].astype(str).str.strip().str.upper()
    state_to_abbr = dict(zip(df["State"], df["Abbreviation"]))
    abbr_to_state = dict(zip(df["Abbreviation"], df["State"]))
    print(f"âœ… Loaded {len(state_to_abbr)} state mappings from abbreviation_list 1.csv")
    return state_to_abbr, abbr_to_state

def normalize_state(s, state_to_abbr, abbr_to_state):
    if not s: return None
    s_clean = clean_text(str(s)).replace('.', '').upper().strip()
    if s_clean in abbr_to_state:
        return abbr_to_state[s_clean]
    if s_clean.title() in state_to_abbr:
        return s_clean.title()
    best, score, _ = process.extractOne(s_clean.title(), list(state_to_abbr.keys()))
    return best if score >= 85 else s_clean.title()

# ------------------------------------
# VALIDATION CORE
# ------------------------------------
def validate_batch(df, master_by_pin, batch_no, state_to_abbr, abbr_to_state):
    results=[]
    for _,r in tqdm(df.iterrows(), total=len(df), desc=f"Batch {batch_no}"):
        addr_raw=" ".join([str(x) for x in [r.get('address1'),r.get('address2'),r.get('address3')]
                           if x and str(x).lower()!='nan']).strip()
        addr_clean=clean_text(addr_raw)
        pin=extract_pin(addr_raw) or extract_pin(r.get('pincode'))
        city_in=normalize_city(r.get('city'))
        state_in=normalize_state(r.get('state'), state_to_abbr, abbr_to_state)
        country="India"

        best=None
        city_conf=state_conf=loc_conf=pin_score=0.0
        pin_match="No"; flag="No"; reason=""

        # --- PIN MATCH PATH ---
        if pin and pin in master_by_pin:
            dfp=master_by_pin[pin]
            if 'city_norm' not in dfp.columns:
                dfp['city_norm']=dfp['city'].apply(normalize_city)
                dfp['state_norm']=dfp['state'].apply(lambda s: normalize_state(s, state_to_abbr, abbr_to_state))
                dfp['office_norm']=dfp['office_name'].apply(normalize_city)
                master_by_pin[pin]=dfp

            dfp['city_sim']=dfp['city_norm'].apply(lambda x: sim(x, city_in))
            dfp['state_sim']=dfp['state_norm'].apply(lambda x: sim(x, state_in))
            dfp['office_sim']=dfp['office_norm'].apply(lambda x: sim(x, addr_clean))
            dfp['total_score']=0.58*dfp['city_sim']+0.27*dfp['state_sim']+0.15*dfp['office_sim']
            best=dfp.sort_values('total_score',ascending=False).iloc[0]

            city_conf=float(best['city_sim']); state_conf=float(best['state_sim'])
            loc_conf=float(best['office_sim']); pin_score=float(best['total_score'])

            if pin_score>=0.45 or (city_conf>=CITY_THRESHOLD and state_conf>=STATE_THRESHOLD):
                pin_match="Yes"
            else:
                flag="Yes"; reason="Low similarity despite valid pin"
        else:
            flag="Yes"; reason="Pincode missing or not found in master_ref"

        overall=(0.5*city_conf+0.3*state_conf+0.2*1.0)
        conf_level="High" if overall>=0.8 else ("Medium" if overall>=0.6 else "Low")

        results.append({
            "Address1":addr_raw,
            "City":city_in,
            "State":state_in,
            "Pincode":pin,
            "Country":country,
            "Pin_Match":pin_match,
            "Pin_Match_Score":round(pin_score,3),
            "City_Confidence":round(city_conf,3),
            "State_Confidence":round(state_conf,3),
            "Overall_Confidence":round(overall,3),
            "Confidence_Level":conf_level,
            "Flag":flag,
            "Reason":reason,
            "Locality":best['office_name'] if best is not None else None
        })
    return pd.DataFrame(results)

# ------------------------------------
# MAIN EXECUTION
# ------------------------------------
def main():
    print("ðŸš€ Starting Address Validator v7 ...")
    eng=get_db_connection()
    with eng.begin() as con:
        master=pd.read_sql("SELECT * FROM av.master_ref",con)
        inp=pd.read_sql("SELECT * FROM av.input_addresses",con)

    state_to_abbr, abbr_to_state = load_state_mappings()

    # âœ… Drop & recreate table before any insertion
    with eng.begin() as con:
        con.execute(text("DROP TABLE IF EXISTS av.validation_result_final CASCADE"))
        con.execute(text("""
            CREATE TABLE av.validation_result_final (
                address1 TEXT, city TEXT, state TEXT, pincode TEXT, country TEXT,
                pin_match TEXT, pin_match_score NUMERIC,
                city_confidence NUMERIC, state_confidence NUMERIC,
                overall_confidence NUMERIC, confidence_level TEXT,
                flag TEXT, reason TEXT, locality TEXT
            )
        """))
        print("âœ… Recreated table av.validation_result_final")

    master_by_pin={k:v for k,v in master.groupby('pincode')}
    chunks=[inp[i:i+10000] for i in range(0,len(inp),10000)]

    for i,ch in enumerate(chunks,1):
        df_part=validate_batch(ch, master_by_pin, i, state_to_abbr, abbr_to_state)
        fname=f"validated_output_part{i}.xlsx"
        df_part.to_excel(fname,index=False)
        print(f"ðŸ’¾ Saved {fname}")

        df_db=df_part.fillna("").copy()
        df_db.columns=df_db.columns.str.lower()
        with eng.begin() as con:
            for _,row in df_db.iterrows():
                con.execute(text("""
                    INSERT INTO av.validation_result_final
                    (address1,city,state,pincode,country,pin_match,pin_match_score,
                     city_confidence,state_confidence,overall_confidence,
                     confidence_level,flag,reason,locality)
                    VALUES(:a,:c,:s,:p,:co,:pm,:pms,:cc,:sc,:oc,:cl,:f,:r,:l)
                """),{
                    "a":row.address1,"c":row.city,"s":row.state,"p":row.pincode,
                    "co":row.country,"pm":row.pin_match,"pms":row.pin_match_score,
                    "cc":row.city_confidence,"sc":row.state_confidence,
                    "oc":row.overall_confidence,"cl":row.confidence_level,
                    "f":row.flag,"r":row.reason,"l":row.locality
                })
        print(f"âœ… Batch {i} inserted into DB ({len(df_db)} rows).")

    print("ðŸŽ¯ All batches processed successfully!")

if __name__=="__main__":
    main()
